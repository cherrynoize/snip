#!/usr/bin/env bash
# snip | simple screenshot/screencast utility
#
# author | cherrynoize
# https://github.com/cherrynoize

config_file="${SNIPRC:-"$HOME/.config/snip/sniprc"}"
[ -e "$config_file" ] && . "$config_file"

# default destination path
dest_path="${SNIP_PATH:-$HOME/snip}"

# default time delay before capture (in seconds)
capture_delay="${SNIP_DELAY:-"0"}"

declare -A post_cmd

# default command to execute after screenshots (compress png)
post_cmd["screenshot"]="${SNIP_SCREENSHOT_CMD:-"optipng \"%DEST%\" &"}"

# default command to execute after screencasts (strip audio)
post_cmd["record"]="${SNIP_RECORD_CMD:-"ffmpeg -i \"%DEST%\" -c copy -an \"noa_%DEST%\" && mv \"noa_%DEST%\" \"%DEST%\""}"

fullscreen="${SNIP_DEFAULT_FULLSCREEN:-true}"
verbose="${SNIP_DEFAULT_VERBOSITY:-1}"

dest_filename="$(date '+%Y-%m-%d-%H%M%S')_"'$wx$h_'"$(hostname)-${USER}_snip"
dest_filename="${SNIP_FILENAME:-"$dest_filename"}"

default_img_fmt="${SNIP_IMG_FILE:-png}"
default_vid_fmt="${SNIP_VID_FILE:-mp4}"

tmp_dir="${SNIP_TMP_DIR:-/tmp}"

screen_res="$(xrandr | grep '*' | awk '{print $1;}')"
screen_res="${screen_res:-"1920x1080"}"

throw_error () {
  case "$1" in
    codec)
      echo "error: unable to find $file_format extension for $cmd command"
      exit 1
      ;;
    *)
      echo "unknown error: exiting"
      exit 255
  esac
}

send_notification () {
  notification_title="${1:-"$notification_title"}"
  if [ -z "$1" ] || [ -n "$2" ]; then
    notification_body="${2:-"Saved to '$(join_dest_path)'"}"
  fi
  dunstify --action="default,Default" -t "$notification_timeout" -r "$notification_id" "$notification_title" "$notification_body"
}

# outputs full destination path
join_dest_path () {
  filename="${dest_filename//\$wx\$h/$screen_res}"
  dest="$dest_path/$filename$dest_file_ext"
  echo "$dest"
}

# run after capture command
run_post_command () {
  run="${post_cmd[${1:-screenshot}]}"
  run="${run//%DEST%/$(join_dest_path)}"
  eval "$run"
}

check_running_ffmpeg () {
  if pgrep -x "ffmpeg" > /dev/null; then
    echo "error: ffmpeg is already running"
    echo "snip cannot capture video while ffmpeg is running"
    exit 5
  fi
}

convert_to_gif () {
  source="$1"
  ffmpeg -i "$source" \
    -vf "fps=5,scale=iw:-1:-1:flags=lanczos,split[s0][s1];[s0]palettegen=max_colors=32[p];[s1][p]paletteuse=dither=bayer" \
    -loop 0 \
    "${source%.*}.gif" &&
    rm "$source"
}

record_gif () {
  record_mp4 "${1:-"output.mp4"}"
  send_notification "Recording stopped" "Converting video output..."
  notification_title="Conversion terminated"
  convert_to_gif "${1:-"output.mp4"}"
}

record_mkv () {
  ffmpeg -f x11grab -video_size "$screen_res" \
    -framerate 25 -stream_loop -1 -i "$DISPLAY" \
    -c:v ffvhuff \
    "${1:-"output.mkv"}"
}

record_mp4 () {
    ffmpeg -f x11grab -video_size "$screen_res" \
      -framerate 24 -stream_loop -1 \
      -i "$DISPLAY" \
      -c:v libx264 -c:a aac \
      -preset ultrafast \
      "${1:-"output.mp4"}"
}

notification_title="Screenshot taken"
notification_id=5445
notification_timeout=5000

# image file formats
declare -A img_fmt_ext=(
  [png]=.png
)

# video file formats
declare -A vid_fmt_ext=(
  [gif]=.mp4
  [mkv]=.mkv
  [mp4]=.mp4
)

usage () {
cat<<EOF
snip | simple screenshot/screencast utility

usage: snip [command] [options]

command:
  help        show this help message
  screenshot  take screenshot and store into output file
  clipboard   take screenshot and store it in clipboard
  record      record screencast to output file

options:
  -w|--window           capture active window only (currently only for screenshots)
  -e|--execute [cmd]    command to execute after capture
  -f|--format [codec]   specify output file format (see available formats below)
  -i|--nid [id]         notification id
  -t|--ntimeout [time]  notification timeout
  -T|--ntitle [title]   notification title
  -B|--nbody [body]     notification body
  -q|--quiet            do not show notifications and output less stuff ${verbose:-(default)}
  -v|--verbose          show notifications and output more stuff ${verbose:+(default)}

any other option is passed as is to the utility used for each task (scrot for screenshot, ffcast for clipboard or ffmpeg for record)

file formats:
  screenshot  $(for fmt in "${!img_fmt_ext[@]}"; do printf "%s " "$fmt"; done)
  record      $(for fmt in "${!vid_fmt_ext[@]}"; do printf "%s " "$fmt"; done)

environment variables:
  SNIP_PATH   default destination path for snip (default: $dest_path)
  SNIP_DELAY  default delay before capture (in seconds) (default: $capture_delay)
  SNIP_CMD    default command to be executed after capture (default: '${post_cmd["screenshot"]}')

command line options take precedence over environment variables. if no value is provided, snip will fallback to its default.

magic values:
  %DEST%  will be converted to path/to/destination (only inside command to execute)
EOF
}

while [ -n "$1" ]; do
  case "$1" in
    [0-9]*|.[0-9]*)
      # set value for delay (in seconds) before capture
      capture_delay="$1"
      shift
      ;;
    -w|--window)
      fullscreen=false
      shift
      ;;
    -e|--execute)
      # command to execute after capture
      post_screenshot_cmd="$2"
      shift 2
      ;;
    -f|--format)
      file_format="$2"
      shift 2
      ;;
    -i|--nid)
      notification_id="$2"
      shift 2
      ;;
    -t|--ntimeout)
      notification_timeout="$2"
      shift 2
      ;;
    -T|--ntitle)
      notification_title="$2"
      shift 2
      ;;
    -B|--nbody)
      notification_body="$2"
      shift 2
      ;;
    -q|--quiet)
      verbose=
      shift
      ;;
    -v|--verbose)
      verbose=1
      shift
      ;;
    -h|--help)
      cmd=help
      break
      ;;
    -*)
      params+="$1 "
      shift
      ;;
    *)
      cmd="$1"
      shift
      ;;
  esac
done

# create path to destination
if [ ! -e "$dest_path" ]; then
  mkdir -p "$dest_path"
fi

# set file extension for given format
case "$cmd" in
  help)
    ;;
  record)
    file_format="${file_format:-"$default_vid_fmt"}"
    new_vid_ext="${vid_fmt_ext[$file_format]}"
    
    if [ -n "$new_vid_ext" ]; then
      dest_file_ext="$new_vid_ext"
    else
      throw_error codec
    fi
    ;;
  screenshot|clipboard|*)
    file_format="${file_format:-"$default_img_fmt"}"
    new_img_ext="${img_fmt_ext[$file_format]}"

    if [ -n "$new_img_ext" ]; then
      dest_file_ext="$new_img_ext"
    else
      throw_error codec
    fi
  ;;
esac

# wait for set delay before capture
sleep "$capture_delay"

case "$cmd" in
  *help)
    usage
    exit
    ;;
  clipboard)
    # save image inside /tmp and to clipboard
    dest_path="$tmp_dir"
    full_dest_path="$(join_dest_path)"
    scrot $params "$full_dest_path" -e 'xclip -selection clipboard -t image/png -i \"$f\"'
    ;;
  record)
    # try to switch to default screencast path if set
    if [ "$dest_path" = "$SNIP_PATH" ]; then
      dest_path="${SNIP_PATH_SCAST:-"$dest_path"}"
    fi
    full_dest_path="$(join_dest_path)"

    check_running_ffmpeg
    send_notification "Recording to '$full_dest_path'"

    if [ -e "$full_dest_path" ]; then
      echo "error: destination '$full_dest_path' already exists"
      exit 4
    fi

    if ! touch "$full_dest_path"; then
      echo "error: unable to create '$full_dest_path'"
      exit 4
    fi
    rm "$full_dest_path"

    case "$file_format" in
      gif)
        record_gif "${full_dest_path}"
        ;;
      mkv)
        record_mkv "$full_dest_path"
        ;;
      mp4|*)
        record_mp4 "$full_dest_path"
        ;;
    esac

    notification_title="Recording stopped"
    ;;
  screenshot|*)
    # take screenshot
    if [ "$fullscreen" = "true" ]; then
      # fullscreen capture
      scrot $params "$(join_dest_path)"
    else
      # active window only
      dest="${dest//\$wx\$h/win}"
      ffcast -q -# "$(xdotool getactivewindow)" png "$dest"
    fi
    ;;
esac

if [ -n "$verbose" ]; then
  # show notification after capture
  send_notification &
fi

run_post_command "$cmd"
